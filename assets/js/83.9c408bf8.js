(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{439:function(_,v,t){"use strict";t.r(v);var s=t(7),e=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"tcp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[_._v("#")]),_._v(" TCP")]),_._v(" "),v("p",[_._v("TCP（Transmission Control Protocol 传输控制协议）是一个"),v("strong",[_._v("面向连接的")]),_._v("、"),v("strong",[_._v("可靠的")]),_._v("、"),v("strong",[_._v("基于字节流")]),_._v("的传输层通信协议")]),_._v(" "),v("p",[_._v("TCP 连接")]),_._v(" "),v("p",[_._v("TCP 连接是用于保证可靠性和流量控制维护的某些状态信息的组合，这些信息包括 Socket、序列号和窗口大小")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("Socket")]),_._v("：由 IP 地址和端口号组成")]),_._v(" "),v("li",[v("strong",[_._v("序列号")]),_._v("：用来解决乱序问题等")]),_._v(" "),v("li",[v("strong",[_._v("窗口大小")]),_._v("：用来做流量控制")])]),_._v(" "),v("p",[_._v("TCP 四元组")]),_._v(" "),v("ul",[v("li",[_._v("源地址")]),_._v(" "),v("li",[_._v("源端口")]),_._v(" "),v("li",[_._v("目的地址")]),_._v(" "),v("li",[_._v("目的端口")])]),_._v(" "),v("p",[_._v("TCP 四元组可以唯一的确定一个连接")]),_._v(" "),v("h2",{attrs:{id:"三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[_._v("#")]),_._v(" 三次握手")]),_._v(" "),v("blockquote",[v("p",[_._v("TCP 连接建立")])]),_._v(" "),v("p",[v("strong",[_._v("三次握手")]),_._v("是指在建立一个 TCP 连接时客户端和服务器总共要"),v("strong",[_._v("发送 3 个数据包以确认连接的建立")])]),_._v(" "),v("p",[_._v("三次握手的过程如下图所示：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://liaoyio.github.io/notes/assets/tcp-three-handshakes.dd478e65.png",alt:"TCP 三次握手"}})]),_._v(" "),v("p",[_._v("最开始时客户端和服务器都处于 "),v("code",[_._v("CLOSED")]),_._v(" 状态。然后服务器主动监听某个端口（此时处于 "),v("code",[_._v("LISTEN")]),_._v(" 状态）")]),_._v(" "),v("h3",{attrs:{id:"第一次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第一次握手"}},[_._v("#")]),_._v(" 第一次握手")]),_._v(" "),v("blockquote",[v("p",[v("strong",[_._v("由客户端发起")])])]),_._v(" "),v("p",[_._v("客户端会随机初始化一个序列号（"),v("code",[_._v("client_isn")]),_._v("）然后发送一个带有 "),v("code",[_._v("SYN")]),_._v(" "),v("code",[_._v("seq = client_isn")]),_._v(" 信息的数据包。发送完成后客户端进入 "),v("code",[_._v("SYN_SEND")]),_._v(" 状态（连接发送状态）")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("SYN")]),_._v(" 是一个标志位，为 1 时表示希望建立连接")]),_._v(" "),v("li",[v("code",[_._v("seq = client_isn")]),_._v(" 是客户端随机初始化的序列号（一个 32 位的无符号数）")])]),_._v(" "),v("h3",{attrs:{id:"第二次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第二次握手"}},[_._v("#")]),_._v(" 第二次握手")]),_._v(" "),v("blockquote",[v("p",[v("strong",[_._v("由服务器发起")])])]),_._v(" "),v("p",[_._v("服务器收到客户端的 "),v("code",[_._v("SYN")]),_._v(" 报文后，首先会随机初始化自己的序列号（"),v("code",[_._v("server_isn")]),_._v("）然后发送一个带有 "),v("code",[_._v("SYN")]),_._v(" "),v("code",[_._v("ACK")]),_._v(" "),v("code",[_._v("seq = server_isn")]),_._v(" "),v("code",[_._v("ack = client_isn + 1")]),_._v(" 信息的数据包。发送完成后服务器进入 "),v("code",[_._v("SYN_RCVD")]),_._v(" 状态（连接收到状态）")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("ACK")]),_._v(" 是一个标志位，表示收到了请求")]),_._v(" "),v("li",[v("code",[_._v("seq = server_isn")]),_._v(" 是服务器随机初始化的序列号（一个 32 位的无符号数）")]),_._v(" "),v("li",[v("code",[_._v("ack = client_isn + 1")]),_._v(" 是一个确认应答号，值为"),v("strong",[_._v("客户端序列号 + 1")])])]),_._v(" "),v("h3",{attrs:{id:"第三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第三次握手"}},[_._v("#")]),_._v(" 第三次握手")]),_._v(" "),v("blockquote",[v("p",[v("strong",[_._v("由客户端发起")])])]),_._v(" "),v("p",[_._v("客户端收到服务器报文后，会再发送一个带有 "),v("code",[_._v("ACK")]),_._v(" "),v("code",[_._v("ack = server_isn + 1")]),_._v(" 信息的数据包。发送完成后客户端进入 "),v("code",[_._v("ESTABLISHED")]),_._v(" 状态（连接成功状态）服务器收到客户端发送的应答报文包后也会进入 "),v("code",[_._v("ESTABLISHED")]),_._v(" 状态")]),_._v(" "),v("ul",[v("li",[v("code",[_._v("ack = server_isn + 1")]),_._v(" 是一个确认应答号，值为"),v("strong",[_._v("服务器序列号 + 1")])])]),_._v(" "),v("p",[_._v("三次握手可以保证客户端和服务器能够确认双方的接收和发送能力是否正常")]),_._v(" "),v("ul",[v("li",[_._v("第一次握手：客户端发送SYN报文给服务器，服务器接收该报文\n"),v("ul",[v("li",[_._v("客户端什么都不能确认")]),_._v(" "),v("li",[_._v("服务器确认：自己接收正常，对方发送正常")])])]),_._v(" "),v("li",[_._v("第二次握手：服务器发送SYN + ACK报文给客户端，客户端接收该报文\n"),v("ul",[v("li",[_._v("客户端确认：自己发送正常、接收正常，对方发送正常、接收正常")]),_._v(" "),v("li",[_._v("服务器确认：自己接收正常，对方发送正常")])])]),_._v(" "),v("li",[_._v("第三次握手：客户端发送ACK报文给服务器\n"),v("ul",[v("li",[_._v("客户端在第二次握手时已经完成确认")]),_._v(" "),v("li",[_._v("服务器确认：自己发送正常，接收正常，对方发送正常、接收正常")])])])]),_._v(" "),v("h3",{attrs:{id:"三次握手的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三次握手的作用"}},[_._v("#")]),_._v(" 三次握手的作用？")]),_._v(" "),v("ol",[v("li",[_._v("防止旧的重复连接初始化造成混乱")]),_._v(" "),v("li",[_._v("同步双方初始序列号（序列号能够保证数据包不重复、不丢弃和按序传输）")]),_._v(" "),v("li",[_._v("避免资源浪费")])]),_._v(" "),v("h3",{attrs:{id:"为什么不是两次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是两次握手"}},[_._v("#")]),_._v(" 为什么不是两次握手?")]),_._v(" "),v("p",[_._v("两次握手无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号")]),_._v(" "),v("h3",{attrs:{id:"为什么不是四次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是四次握手"}},[_._v("#")]),_._v(" 为什么不是四次握手?")]),_._v(" "),v("p",[_._v("因为通过前三次已经可以建立一个可靠的连接，如果再发送第四次确认消息会浪费资源，所以不需要使用更多的通信次数")]),_._v(" "),v("h3",{attrs:{id:"三次握手过程中-可以携带数据吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三次握手过程中-可以携带数据吗"}},[_._v("#")]),_._v(" 三次握手过程中，可以携带数据吗？")]),_._v(" "),v("p",[_._v("第一次、第二次握手不可以携带数据，第三次握手可以携带数据，因为在第三次握手时客户端已经处于连接状态，已经知道服务器的接收、发送能力是正常的")]),_._v(" "),v("h2",{attrs:{id:"四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[_._v("#")]),_._v(" 四次挥手")]),_._v(" "),v("blockquote",[v("p",[_._v("TCP 连接断开")])]),_._v(" "),v("p",[v("strong",[_._v("四次挥手")]),_._v("是指断开一个 TCP 连接时客户端和服务器总共"),v("strong",[_._v("发送 4 个包以确认连接的断开")]),_._v(" "),v("strong",[_._v("客户端和服务器双方都可以主动断开连接")])]),_._v(" "),v("p",[_._v("四次挥手的过程如下图所示：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://liaoyio.github.io/notes/assets/tcp-four-waves.3c9d16cd.png",alt:"TCP 四次挥手"}})]),_._v(" "),v("p",[_._v("最开始时客户端和服务器都处于 "),v("code",[_._v("ESTABLISHED")]),_._v(" 状态")]),_._v(" "),v("h3",{attrs:{id:"第一次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第一次挥手"}},[_._v("#")]),_._v(" 第一次挥手")]),_._v(" "),v("p",[_._v("客户端先发送一个带有 "),v("code",[_._v("FIN=1")]),_._v(" 信息的数据包，然后客户端进入 "),v("code",[_._v("FIN_WAIT_1")]),_._v(" 状态")]),_._v(" "),v("h3",{attrs:{id:"第二次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第二次挥手"}},[_._v("#")]),_._v(" 第二次挥手")]),_._v(" "),v("p",[_._v("服务器收到客户端的 "),v("code",[_._v("FIN")]),_._v(" 报文后，就向客户端发送 "),v("code",[_._v("ACK")]),_._v(" 应答报文，然后服务器进入 "),v("code",[_._v("CLOSED_WAIT")]),_._v(" 状态\n当客户端收到服务器的 "),v("code",[_._v("ACK")]),_._v(" 应答报文后会进入 "),v("code",[_._v("FIN_WAIT_2")]),_._v(" 状态")]),_._v(" "),v("h3",{attrs:{id:"第三次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第三次挥手"}},[_._v("#")]),_._v(" 第三次挥手")]),_._v(" "),v("p",[_._v("当服务器处理完数据后，会向客户端发送 "),v("code",[_._v("FIN")]),_._v(" 报文，之后服务器进入 "),v("code",[_._v("LAST_ACK")]),_._v(" 状态")]),_._v(" "),v("h3",{attrs:{id:"第四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第四次挥手"}},[_._v("#")]),_._v(" 第四次挥手")]),_._v(" "),v("p",[_._v("服务器收到服务器的 "),v("code",[_._v("FIN")]),_._v(" 报文后，会回复一个 "),v("code",[_._v("ACK")]),_._v(" 应答报文，之后进入 "),v("code",[_._v("TIME_WAIT")]),_._v(" 状态\n服务器收到了 "),v("code",[_._v("ACK")]),_._v(" 应答报文后，就进入了 "),v("code",[_._v("CLOSED")]),_._v(" 状态（"),v("strong",[_._v("服务器完成连接的关闭")]),_._v("）\n客户端在经过 "),v("code",[_._v("2MSL")]),_._v(" 一段时间后会自动进入 "),v("code",[_._v("CLOSED")]),_._v(" 状态（"),v("strong",[_._v("客户端完成连接的关闭")]),_._v("）")]),_._v(" "),v("p",[_._v("什么是 MSL")]),_._v(" "),v("p",[v("code",[_._v("MSL")]),_._v(" 是 Maximum Segment Lifetime（"),v("strong",[_._v("报文最大生存时间")]),_._v("）是任何报文在网络上存在的最长时间，超过这个时间报文将会被丢弃")]),_._v(" "),v("p",[v("code",[_._v("2MSL")]),_._v(" 的时间是从客户端接收到 "),v("code",[_._v("FIN")]),_._v(" 后发送 "),v("code",[_._v("ACK")]),_._v(" 开始计时的。如果在 "),v("code",[_._v("TIME-WAIT")]),_._v(" 时间内，因为客户端的 "),v("code",[_._v("ACK")]),_._v(" 没有传输到服务器，客户端又接收到了服务器重发的 "),v("code",[_._v("FIN")]),_._v(" 报文，那么 "),v("code",[_._v("2MSL")]),_._v(" 时间将重新计时")]),_._v(" "),v("h3",{attrs:{id:"为什么挥手需要四次"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么挥手需要四次"}},[_._v("#")]),_._v(" 为什么挥手需要四次？")]),_._v(" "),v("ul",[v("li",[_._v("在关闭连接时客户端向服务器发送 "),v("code",[_._v("FIN")]),_._v(" 时，仅表示客户端不再发送数据了但是还能接收数据；")]),_._v(" "),v("li",[_._v("当服务器在收到客户端的 "),v("code",[_._v("FIN")]),_._v(" 报文时，会先回一个 "),v("code",[_._v("ACK")]),_._v(" 应答报文，而服务器可能还有数据需要处理和发送，等服务器不再发送数据时，才发送 "),v("code",[_._v("FIN")]),_._v(" 报文给客户端来表示同意现在关闭连接。")])]),_._v(" "),v("h3",{attrs:{id:"为什么需要-time-wait-状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-time-wait-状态"}},[_._v("#")]),_._v(" 为什么需要 TIME_WAIT 状态？")]),_._v(" "),v("blockquote",[v("p",[_._v("主动发起关闭连接的一方才有 "),v("code",[_._v("TIME-WAIT")]),_._v(" 状态")])]),_._v(" "),v("ol",[v("li",[_._v("防止历史连接中的数据，被后面相同四元组的连接错误的接收；")]),_._v(" "),v("li",[_._v("保证"),v("strong",[_._v("被动关闭连接")]),_._v("的一方，能被正确的关闭；")])]),_._v(" "),v("h3",{attrs:{id:"为什么-time-wait-等待的时间是-2msl"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么-time-wait-等待的时间是-2msl"}},[_._v("#")]),_._v(" 为什么 TIME_WAIT 等待的时间是 2MSL？")]),_._v(" "),v("ol",[v("li",[_._v("保证服务器能收到最后的 "),v("code",[_._v("ACK")]),_._v(" 应答报文")]),_._v(" "),v("li",[_._v("让此次 TCP 连接中的所有报文在网络中消失，从而避免前后两个使用相同四元组的连接中的前一个连接的报文干扰后一个连接")])]),_._v(" "),v("p",[_._v("假如客户端在送 "),v("code",[_._v("ACK")]),_._v(" 后，这个 "),v("code",[_._v("ACK")]),_._v(" 在 "),v("code",[_._v("1MSL")]),_._v(" 时到达服务器，此时服务器在收到这个 "),v("code",[_._v("ACK")]),_._v(" 的前一刹那，一直在重传 "),v("code",[_._v("FIN")]),_._v("，这个 "),v("code",[_._v("FIN")]),_._v(" 最坏会在 "),v("code",[_._v("1MSL")]),_._v(" 时间内消失。因此从客户端发送 "),v("code",[_._v("ACK")]),_._v(" 的那一刹那开始，等待 "),v("code",[_._v("2MSL")]),_._v(" 可以保证客户端发送的最后一个 "),v("code",[_._v("ACK")]),_._v(" 和服务器发送的最后一个 "),v("code",[_._v("FIN")]),_._v(" 都在网络中消失")]),_._v(" "),v("h2",{attrs:{id:"tcp-和-udp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp"}},[_._v("#")]),_._v(" TCP 和 UDP")]),_._v(" "),v("h3",{attrs:{id:"tcp-和-udp-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的区别"}},[_._v("#")]),_._v(" TCP 和 UDP 的区别")]),_._v(" "),v("ul",[v("li",[v("ol",[v("li",[v("strong",[_._v("连接")])])]),_._v(" "),v("ul",[v("li",[_._v("TCP 是面向连接的传输层协议，传输数据前先要建立连接；")]),_._v(" "),v("li",[_._v("UDP 是不需要连接，即刻传输数据。")])])]),_._v(" "),v("li",[v("ol",[v("li",[v("strong",[_._v("服务对象")])])]),_._v(" "),v("ul",[v("li",[_._v("TCP 是一对一的两点服务，即一条连接只有两个端点；")]),_._v(" "),v("li",[_._v("UDP 支持一对一、一对多、多对多的交互通信。")])])]),_._v(" "),v("li",[v("ol",[v("li",[v("strong",[_._v("可靠性")])])]),_._v(" "),v("ul",[v("li",[_._v("TCP 是可靠交付数据的，数据可以无差错、不丢失、不重复、按需到达；")]),_._v(" "),v("li",[_._v("UDP 是尽最大努力交付，不保证可靠交付数据。")])])]),_._v(" "),v("li",[v("ol",[v("li",[v("strong",[_._v("拥塞控制、流量控制")])])]),_._v(" "),v("ul",[v("li",[_._v("TCP 有拥塞控制和流量控制机制，保证数据传输的安全性；")]),_._v(" "),v("li",[_._v("UDP 没有拥塞控制、流量控制，即使网络非常拥堵了，也不会影响 UDP 的发送速率。")])])]),_._v(" "),v("li",[v("ol",[v("li",[v("strong",[_._v("首部开销")])])]),_._v(" "),v("ul",[v("li",[_._v("TCP 首部长度较长会有一定的开销，首部在没有使用“选项”字段时是 20 个字节，如果使用了“选项”字段则会变长的；")]),_._v(" "),v("li",[_._v("UDP 首部只有 8 个字节，并且是固定不变的，开销较小。")])])]),_._v(" "),v("li",[v("ol",[v("li",[v("strong",[_._v("传输方式")])])]),_._v(" "),v("ul",[v("li",[_._v("TCP 是流式传输，没有边界，但保证顺序和可靠；")]),_._v(" "),v("li",[_._v("UDP 是一个包一个包的发送，是有边界的，但可能会丢包和乱序。")])])]),_._v(" "),v("li",[v("ol",[v("li",[v("strong",[_._v("分片不同")])])]),_._v(" "),v("ul",[v("li",[_._v("TCP 的数据大小如果大于 MSS 大小，则会在传输层进行分片，目标主机收到后，也同样在传输层组装 TCP 数据包，如果中途丢失了一个分片，只需要传输丢失的这个分片。")]),_._v(" "),v("li",[_._v("UDP 的数据大小如果大于 MTU 大小，则会在 IP 层进行分片，目标主机收到后，在 IP 层组装完数据，接着再传给传输层。")])])])]),_._v(" "),v("blockquote",[v("p",[_._v("MSS（Maximum Segment Siz）最大分段大小：一个网络包中除去 IP 和 TCP 头部之后所能容纳的 TCP 数据的最大长度 MTU（Maximum Transmission Unit）最大传输单元：一个网络包的最大长度（以太网中一般为 1500 字节）")])]),_._v(" "),v("h3",{attrs:{id:"tcp-和-udp-的应用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的应用场景"}},[_._v("#")]),_._v(" TCP 和 UDP 的应用场景")]),_._v(" "),v("ul",[v("li",[_._v("TCP 面向连接，能保证数据的可靠性交付，因此经常用于：\n"),v("ul",[v("li",[_._v("FTP 文件传输")]),_._v(" "),v("li",[_._v("HTTP / HTTPS")])])]),_._v(" "),v("li",[_._v("UDP 面向无连接，可随时发送数据，其本身的处理既简单又高效，因此经常用于：\n"),v("ul",[v("li",[_._v("包总量较少的通信，如 DNS 、SNMP 等")]),_._v(" "),v("li",[_._v("视频、音频等多媒体通信")]),_._v(" "),v("li",[_._v("广播通信")])])])]),_._v(" "),v("h3",{attrs:{id:"tcp-和-udp-可以同时绑定相同的端口吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-可以同时绑定相同的端口吗"}},[_._v("#")]),_._v(" TCP 和 UDP 可以同时绑定相同的端口吗？")]),_._v(" "),v("p",[_._v("传输层的"),v("strong",[_._v("端口号")]),_._v("是用于识别同一计算机中同时通信的不同应用程序，而 TCP 和 UDP 是两个不同的传输层协议，其在内核中是两个完全独立的软件模块。\n当主机收到数据包后，可以在 IP 包头的"),v("strong",[_._v("协议号")]),_._v("字段知道该数据包是 TCP 还是 UDP，所以可以根据这个信息确定送给哪个模块 (TCP/UDP) 处理，送给 TCP/UDP 模块的报文根据"),v("strong",[_._v("端口号")]),_._v("确定送给哪个应用程序处理。\n因此 TCP 和 UDP 各自的端口号是相互独立的，如 TCP 有一个 80 号端口，UDP 也可以有一个 80 号端口，二者并不冲突。")])])}),[],!1,null,null,null);v.default=e.exports}}]);